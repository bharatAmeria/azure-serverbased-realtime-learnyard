1. Create repo, clone it in local
2. Create Python virtual environement -> uv venv --python 3.10 .venv (Install using uv. If not installed -> pip install uv)
    (If you are making virtual environement with other name. Make sure to add it into .gitignore file.)
    2.1. Activate the environement -> source .venv/bin/activate
    2.2. Install packages using -> uv add requests pandas
    2.3. Install dependencies -> uv sync --frozen or uv sync 
    2.4. See libraries and its dependencies -> uv tree
    2.5. Run Python file using -> uv run <file_name>
    2.6. Remove Python flask -> uv remove <package_name>
2.2 Run template.py -> uv run tepmlate.py
3. Copy config.json Paste in the root directory.
4. Copy pyproject.toml file. Save it in your directory and Change author name accordingly.
5. Copy and paste src folder in your project directory.
6. Now configure our src folder as a package using -> uv pip install -e .
7. Add data in the artifacts/raw_data . From where we read our data for processing and training.
   (If you want remote storage as data ingestion. You cahnge path in config.json file.)
8. Copy main.py file project root directory. Run file main.py to check if components are working or not.
9. Make dircetory named app. Copy code file in the folder.
10. Run app/app.py to check. If our web app working or not.
11. Now launch uour docker desktop. In terminal run the below command. In your terminal.
        docker buildx build --platform linux/amd64 -t <docker username>/myflaskapp:latest .
        docker push <docker username>/myflaskapp:latest
12. Test your docker image -> 
        docker pull <docker username>/myflaskapp:latest
        docker run -p 5000:5000 <docker username>/myflaskapp:latest
13. Now SignIn your Azure account. To configure our VM.
    
    a. In the Azure Portal, search for Virtual Machines in the search bar.
    b. Click + Create â†’ Azure Virtual Machine.
    c. Subscription: Select your active subscription.
    d. Resource Group: Create a new one (e.g., flask-rg) or use an existing one.
    e. Virtual Machine Name: e.g., flask-vm.
    f. Region: Choose nearest to you (e.g., Central India, East US).
    g. Availability Options: Leave default (No infrastructure redundancy).
    h. Image: Select Ubuntu Server 22.04 LTS.
    i. Size: Choose at least Standard_B1s (cheap) or Standard_B2s (more powerful).
    j. Authentication Type:
        SSH public key (recommended, secure and We use this method in thie project.) 
            Or
        Username: e.g., azureuser.
        Generate or upload your SSH key.
    k. Configure Networking: 
        - Virtual Network & Subnet: Auto-created is fine.
        - Public IP: Leave default (so you can access via internet).
        - NIC network security group (firewall rules):
            Allow SSH (22)
            Allow HTTP (80)
            (Optional) Allow HTTPS (443)
    l. OS Disk: Standard SSD is fine.
       Leave other settings default unless you need something special.
    m. Review & Create
        - Click Review + Create.
        - Validate settings.
        - Click Create.

14. Connect to Your VM: 
        SSH into it: If you use SSH Public Key. Then there is public key file downloaded.
        - copy that file and save in your project root directory. In .ssh folder (remeber to add your .ssh folder in the .gitignore file.)
        - To connect: 
            ssh azureuser@<VM_PUBLIC_IP>
            chmod 600 .ssh/<your Key>
            ssh -i .ssh/my_key azureuser@<VM_PUBLIC_IP>

15. Once You connected to your VM remotely. Install Docker.
        sudo apt update
        sudo apt install -y docker.io
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker $USER

        sudo groupadd docker
        sudo usermod -aG docker azureuser
        newgrp docker

        sudo docker pull bharat9838/myflaskapp:latest2
        docker run -d -p 80:5000 --name flask-app --restart unless-stopped bharat9838/myflaskapp:latest

16. Now hit the url: http://<VM_PUBLIC_IP>/
17. create a folder .github/ for our github actions workflow. Copy and the file in the folder.
(We automate the whole same process tile docker image.)
18. Do final commit.

-------------------- Delete Resources -------------------------

az group delete --name <RESOURCE_GROUP_NAME> --yes --no-wait
